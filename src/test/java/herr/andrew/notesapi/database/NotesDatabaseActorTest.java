package herr.andrew.notesapi.database;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import org.dbunit.Assertion;
import org.dbunit.DataSourceBasedDBTestCase;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.ITable;
import org.dbunit.dataset.filter.DefaultColumnFilter;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.Test;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import herr.andrew.notesapi.structures.Note;

/**
 * Tests for the database layer
 */
public class NotesDatabaseActorTest extends DataSourceBasedDBTestCase {
    private static final String TABLE_NAME = "notes";
    private static final Note NOTE_ONE = new Note(1, "note one");
    private static final Note NOTE_TWO = new Note(2, "note two");

    @Override
    protected IDataSet getDataSet() throws Exception {
        return new FlatXmlDataSetBuilder().build(getClass().getResource("twoNotes.xml"));
    }

    @Override
    protected DataSource getDataSource() {
        HikariConfig config = new HikariConfig();
        config.setDataSourceClassName("org.h2.jdbcx.JdbcDataSource");
        config.setConnectionTestQuery("VALUES 1");
        config.addDataSourceProperty("URL", "jdbc:h2:file:./notesdb-test");
        config.addDataSourceProperty("user", "sa");
        return new HikariDataSource(config);
    }

    /** Make sure we insert into the database as expected */
    @Test
    public void testCreateNoteShouldInsertIntoDatabaseAndReturnNotes() throws Exception {
        DatabaseOperation.DELETE_ALL.execute(getConnection(), getDataSet());

        Note newNote = new Note(1, "new note body");
        NotesDatabaseActor actor = new NotesDatabaseActor(getDataSource());
        Note actualNote = actor.createNote(newNote.getBody());

        ITable actualTable = getConnection().createDataSet().getTable(TABLE_NAME);
        ITable expectedTable = new FlatXmlDataSetBuilder().build(getClass().getResource("oneNoteNoPk.xml"))
                .getTable(TABLE_NAME);

        // don't compare the ids because they're autogenerated
        ITable filteredTable = DefaultColumnFilter.includedColumnsTable(actualTable,
                expectedTable.getTableMetaData().getColumns());
        Assertion.assertEquals(expectedTable, filteredTable);
        assertEquals(newNote.getBody(), actualNote.getBody());
    }

    /** Be sure we get the Note out of the database as expected */
    @Test
    public void testGetNoteHappy() throws SQLException {
        NotesDatabaseActor actor = new NotesDatabaseActor(getDataSource());
        Note actual = actor.getNote(1);
        assertEquals(NOTE_ONE, actual);
    }

    /** Throw if there's no id */
    @Test(expected = SQLException.class)
    public void testNoIdInDb() {
        NotesDatabaseActor actor = new NotesDatabaseActor(getDataSource());
        try {
            actor.getNote(5);
        } catch (@SuppressWarnings("unused") SQLException e) {
            // Expected because there's no id 5
        }
    }

    /** Make sure we get the expected Note instances from the xml dataset */
    @Test
    public void testAllNotes() throws SQLException {
        List<Note> expectedNotes = new ArrayList<>();
        expectedNotes.add(NOTE_ONE);
        expectedNotes.add(NOTE_TWO);
        NotesDatabaseActor actor = new NotesDatabaseActor(getDataSource());
        assertEquals(expectedNotes, actor.getAllNotes(""));
    }

    /** Tests that querying for text in body restricts output */
    @Test
    public void testAllNotesQuery() throws SQLException {
        List<Note> expectedNotes = new ArrayList<>();
        expectedNotes.add(NOTE_TWO);
        NotesDatabaseActor actor = new NotesDatabaseActor(getDataSource());
        assertEquals(expectedNotes, actor.getAllNotes("two"));

    }
}
